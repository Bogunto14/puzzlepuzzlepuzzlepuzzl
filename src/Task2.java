
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class Task2 extends Application{

    public static void main (String[] args){
        launch(args);
    }

    @Override public void start(Stage primaryStage) throws Exception{
        Group root = new Group();
        primaryStage.setScene(new Scene(root));

        Text text = new Text();
        text.setText("Цикл — это блок команд, который выполняется снова и снова, пока соблюдается определённое условие. Повторяемый фрагмент\n" +
                "кода называют «телом цикла». Одно выполнение тела цикла называют итерацией.\n" +
                "while – цикл с предусловием – сначала проверяем условие, затем выполняем тело цикла;\n" +
                "do… while – цикл с постусловием – сначала выполняем один раз тело цикла, затем проверяем условие и, если оно соблюдается,\n" +
                "продолжаем;\n" +
                "(Отличие while и do while состоит в том, что условие после ключевого слова while проверяется не ПЕРЕД каждой итерацией, а ПОСЛЕ каждой\n" +
                "итерации, из-за этого тело цикла do..while всегда выполняется хотя бы один раз. Поэтому данные циклы называются циклом\n" +
                "с предусловием (while) или циклом с постусловием (do..while).)\n" +
                "for – цикл со счётчиком – выполняется и при каждой итерации обновляет счётчик, пока условие в объявлении цикла соблюдается\n" +
                "(т.е. проверка условия возвращает true);\n" +
                "Конструкция for (i in 1..n) { …\u200B } читается как \"Для всех i в интервале от 1 до n (выполнить) …\u200B\". В данной конструкции\n" +
                "объявляется параметр цикла for, которому даётся имя i. Внутри фигурных скобок находится тело цикла for. Тело цикла в данном\n" +
                "случае будет выполнено n раз, то есть произойдёт n итераций. На каждой итерации параметр i будет иметь различные значения — от 1 до n.\n" +
                "Суть условия цикла – проверка выражения с одной или несколькими переменными: «Пока a<11, в каждой итерации выполняем тело\n" +
                "цикла и увеличиваем \"а\" на 1». Оператор for может использоваться не только для перебора чисел в интервале (от меньшего к большему с шагом 1),\n" +
                "но и для перебора чисел в заданной прогрессии. Интервал, как мы уже видели, создаётся оператором вида min..max.\n" +
                "Типичные примеры создания прогрессии выглядят так:\n" +
                "10 downTo 1 — прогрессия от большего числа к меньшему, с шагом 1 (10, 9, 8, …\u200B, 1);\n" +
                "1..99 step 2 — прогрессия от меньшего числа к большему, но с шагом 2 (в данном случае, перебор всех нечётных чисел по возрастанию);\n" +
                "100 downTo 2 step 2 — прогрессия от большего числа к меньшему, с шагом 2 (перебор всех чётных чисел по убыванию).\n" +
                "Модифицирующие операторы: +=, -=, /=, %=, *=\n" +
                "Если мы используем конструкции с while, значение нужно указать перед началом цикла.\n" +
                "Если же переменная работает как счётчик цикла, а за его пределами не используется, её инициализируют прямо в условии.\n" +
                "И тут же пишут, что с ней делать в конце каждой итерации. Всё это – в одну строку – с помощью for.\n" +
                "Для выхода из цикла есть ключевые слова break — «прервать», continue — «возобновить» и return — «вернуться».\n" +
                "Команда break переключает программу на выполнение следующих за циклом операторов. Условия прерывания цикла в Java оформляют\n" +
                "через if-ветвление. Главное, чтобы проверка выполнялась перед основной частью тела цикла.. \n");
        text.setTranslateX(50);
        text.setTranslateY(50);

        Button buttonStart = new Button("Запомнил!");
        buttonStart.setTranslateX(380);
        buttonStart.setTranslateY(600);
        buttonStart.setOnAction(e -> startPuzzle(primaryStage));

        root.getChildren().addAll(text,buttonStart);

    }

    public static void startPuzzle(Stage primaryStage) {
        Puzzle2 pp = new Puzzle2();
        try {
            pp.start(primaryStage);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}